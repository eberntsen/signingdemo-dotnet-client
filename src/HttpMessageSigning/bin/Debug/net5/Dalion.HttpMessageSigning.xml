<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dalion.HttpMessageSigning</name>
    </assembly>
    <members>
        <member name="T:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm">
            <summary>
                Represents the ECDsa signature algorithm.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.#ctor(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.ECDsa)">
            <summary>
                Creates a new <see cref="T:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm" />.
            </summary>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <param name="ecdsa">The Elliptic Curve Digital Signature Algorithm.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.HashAlgorithm">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.Name">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.ComputeHash(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.VerifySignature(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.CreateForSigning(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.ECParameters)">
            <summary>
                Create a new instance of this class, using the specified settings, for signing purposes.
            </summary>
            <param name="hashAlgorithmName">The name of the hash algorithm to use.</param>
            <param name="privateParameters">The private parameters for the ECDsa algorithm.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.CreateForVerification(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.ECParameters)">
            <summary>
                Create a new instance of this class, using the specified settings, for verification purposes.
            </summary>
            <param name="hashAlgorithmName">The name of the hash algorithm to use.</param>
            <param name="publicParameters">The public parameters for the ECDsa algorithm.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ECDsaSignatureAlgorithm.GetPublicKey">
            <summary>
                Export the public key of this ECDsa algorithm.
            </summary>
            <returns>The parameters containing the public key of this ECDsa algorithm.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Extensions">
            <summary>
                Extension methods for this library.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Extensions.UriUnescape(System.String)">
            <summary>
                Perform URI unescaping on the specified string.
            </summary>
            <param name="encoded">The string that might be encoded.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Extensions.UriEscape(System.String,Dalion.HttpMessageSigning.UriEscaping)">
            <summary>
                Perform URI escaping, according to RFC 3986, on the specified <see cref="T:System.String" /> representation of the <see cref="T:System.Uri" />.
            </summary>
            <param name="unescaped">The <see cref="T:System.String" /> representation of the <see cref="T:System.Uri" /> that needs to be encoded.</param>
            <param name="escaping">The rule set to follow when escaping.</param>
            <returns>The escaped string representation of the specified Uri <see cref="T:System.String" />, according to RFC 3986.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Extensions.UriEscape(System.Uri,Dalion.HttpMessageSigning.UriEscaping)">
            <summary>
                Perform URI escaping, according to RFC 3986, on the specified <see cref="T:System.Uri" />.
            </summary>
            <param name="decoded">The <see cref="T:System.Uri" /> that needs to be escaped.</param>
            <param name="escaping">The rule set to follow when escaping.</param>
            <returns>The escaped string representation of the specified <see cref="T:System.Uri" />, according to RFC 3986.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.HeaderDictionary">
            <summary>
                A dictionary that contains headers, identified by their names.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.#ctor">
            <summary>
                Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
                Creates a new instance of this class.
            </summary>
            <param name="headers">The data to initialize this instance with.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.HeaderDictionary.Item(System.String)">
            <summary>
                Gets or sets the indexer property of this dictionary.
            </summary>
            <param name="key">The key to get or set the values for.</param>
            <remarks>If no header with the specified key is found, <see cref="F:Microsoft.Extensions.Primitives.StringValues.Empty" /> is returned.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.HeaderDictionary.Count">
            <summary>
                Gets the number of items contained by this dictionary.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.Contains(System.String)">
            <summary>
                Gets a value indicating whether this dictionary contains an item with the specified key.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>True if the dictionary contains an item with the specified key, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.Remove(System.String)">
            <summary>
                Remove the item with the specified key.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>True if an item was removed, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.GetValues(System.String)">
            <summary>
                Gets the values of the header associated with the specified key.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>The values of the header associated with the specified key.</returns>
            <remarks>If no header with the specified key is found, <see cref="F:Microsoft.Extensions.Primitives.StringValues.Empty" /> is returned.</remarks>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.Clear">
            <summary>
                Clears all items from this dictionary.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.Add(System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
                Add an item to this dictionary.
            </summary>
            <param name="key">The key of the item to add.</param>
            <param name="values">The values of the item to add.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.TryGetValues(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
                Tries to get the values of the header associated with the specified key.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">This will contain the values of the header, if one is found, otherwise <see cref="F:Microsoft.Extensions.Primitives.StringValues.Empty" />.</param>
            <returns>True if an item with the specified key was found, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderDictionary.ToDictionary">
            <summary>
                Create a new <see cref="T:System.Collections.IDictionary" /> out of the contents of this dictionary.
            </summary>
            <returns>A new <see cref="T:System.Collections.IDictionary" /> with the contents of this dictionary.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.HeaderName">
            <summary>
                Represents a pointer to a header of the http request message.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:Dalion.HttpMessageSigning.HeaderName" />.
            </summary>
            <param name="value">The string representation of this instance.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.HeaderName.Value">
            <summary>
                Gets the string representation of this instance.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.HeaderName.Empty">
            <summary>
                Represents an empty <see cref="T:Dalion.HttpMessageSigning.HeaderName" />.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.Equals(Dalion.HttpMessageSigning.HeaderName)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.op_Equality(Dalion.HttpMessageSigning.HeaderName,Dalion.HttpMessageSigning.HeaderName)">
            <summary>
                The equality operator of this type.
            </summary>
            <returns>True if the specified items are equal, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.op_Inequality(Dalion.HttpMessageSigning.HeaderName,Dalion.HttpMessageSigning.HeaderName)">
            <summary>
                The inequality operator of this type.
            </summary>
            <returns>True if the specified items are not equal, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.op_Explicit(System.String)~Dalion.HttpMessageSigning.HeaderName">
            <summary>
                An explicit conversion operator for this type from string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.op_Implicit(Dalion.HttpMessageSigning.HeaderName)~System.String">
            <summary>
                An implicit conversion operator for this type to string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HeaderName.ToString">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.HeaderName.PredefinedHeaderNames">
            <summary>
                Defines the predefined header names.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.HeaderName.PredefinedHeaderNames.RequestTarget">
            <summary>
                The (request-target) pseudo-header.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.HeaderName.PredefinedHeaderNames.Created">
            <summary>
                The (created) pseudo-header.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.HeaderName.PredefinedHeaderNames.Expires">
            <summary>
                The (expires) pseudo-header.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.HeaderName.PredefinedHeaderNames.Date">
            <summary>
                The Date header.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.HeaderName.PredefinedHeaderNames.Digest">
            <summary>
                The Digest header.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.HMACSignatureAlgorithm">
            <summary>
                Represents an HMAC algorithm that is used to sign a request, or to verify a signature.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.#ctor(System.String,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new <see cref="T:Dalion.HttpMessageSigning.HMACSignatureAlgorithm" />.
            </summary>
            <param name="secret">The shared key of the HMAC algorithm.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.Key">
            <summary>
                Gets the shared key of the HMAC algorithm.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.Name">
            <inheritdoc />
        </member>
        <member name="P:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.HashAlgorithm">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.ComputeHash(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.VerifySignature(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HMACSignatureAlgorithm.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.HttpMessageSigningException">
            <summary>
                Represents an <see cref="T:System.Exception" /> that indicates that a HttpMessageSigning operation has resulted in an error.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.HttpMessageSigningException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HttpMessageSigningException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HttpMessageSigningException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.HttpMessageSigningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.ISignatureAlgorithm">
            <summary>
                Represents an algorithm that can be used to create a signature of specified string content.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.ISignatureAlgorithm.Name">
            <summary>
                Gets the descriptive name of the signature algorithm.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.ISignatureAlgorithm.HashAlgorithm">
            <summary>
                Gets the name of the hash algorithm to use when hashing the content.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ISignatureAlgorithm.ComputeHash(System.String)">
            <summary>
                Compute the hash of the specified content.
            </summary>
            <param name="contentToSign">The string content to compute the signature for.</param>
            <returns>The binary representation of the hashed content.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ISignatureAlgorithm.VerifySignature(System.String,System.Byte[])">
            <summary>
                Verify that the specified signature is a match for the specified string content.
            </summary>
            <param name="contentToSign">The string content to verify the signature for.</param>
            <param name="signature">The hashed signature that should match.</param>
            <returns>True if the specified signature matches the expected value, otherwise false.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.IValidatable">
            <summary>
                Represents an object that can self-validate its properties.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.IValidatable.Validate">
            <summary>
                Validates the properties of this instance, and throws an <see cref="T:Dalion.HttpMessageSigning.ValidationException" /> when any of them have invalid values.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.IValidatable.GetValidationErrors">
            <summary>
                Validates the properties of this instance, and returns a list of validation errors.
            </summary>
            <returns>The list with validation errors, or an empty list, when this instance is valid.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.KeyId">
            <summary>
                Represents an entity that the server can use to look up the component they need to verify the signature.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:Dalion.HttpMessageSigning.KeyId" />.
            </summary>
            <param name="value">The string representation of this instance.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.KeyId.Value">
            <summary>
                Gets the string representation of this instance.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.KeyId.Empty">
            <summary>
                Represents an empty <see cref="T:Dalion.HttpMessageSigning.KeyId" />.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.Equals(Dalion.HttpMessageSigning.KeyId)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.op_Equality(Dalion.HttpMessageSigning.KeyId,Dalion.HttpMessageSigning.KeyId)">
            <summary>
                The equality operator of this type.
            </summary>
            <returns>True if the specified items are equal, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.op_Inequality(Dalion.HttpMessageSigning.KeyId,Dalion.HttpMessageSigning.KeyId)">
            <summary>
                The inequality operator of this type.
            </summary>
            <returns>True if the specified items are not equal, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.TryParse(System.String,Dalion.HttpMessageSigning.KeyId@)">
            <summary>
                Try to parse the specified string to a <see cref="T:Dalion.HttpMessageSigning.KeyId" />.
            </summary>
            <param name="value">The string representation to parse.</param>
            <param name="parsed">This will contain the parsed <see cref="T:Dalion.HttpMessageSigning.KeyId" /> when parsing succeeded, otherwise <see cref="P:Dalion.HttpMessageSigning.KeyId.Empty" />.</param>
            <returns>True if parsing succeeded, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.op_Implicit(System.String)~Dalion.HttpMessageSigning.KeyId">
            <summary>
                An implicit conversion operator for this type from string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.op_Implicit(Dalion.HttpMessageSigning.KeyId)~System.String">
            <summary>
                An implicit conversion operator for this type to string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.KeyId.ToString">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.RequestSigningEvents">
            <summary>
                Defines the available hooks during HTTP message signing.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSignedDelegate">
            <summary>
                Represents a delegate for the <see cref="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSigned" /> event.
            </summary>
            <param name="message">The <see cref="T:System.Net.Http.HttpRequestMessage" /> that was signed.</param>
            <param name="signingSettings">The signing settings that were used.</param>
            <param name="signature">The <see cref="T:Dalion.HttpMessageSigning.Signature" /> that was created.</param>
        </member>
        <member name="T:Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSigningDelegate">
            <summary>
                Represents a delegate for the <see cref="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSigning" /> event.
            </summary>
            <param name="message">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to sign.</param>
            <param name="signingSettings">The signing settings to use.</param>
        </member>
        <member name="T:Dalion.HttpMessageSigning.RequestSigningEvents.OnSignatureCreatedDelegate">
            <summary>
                Represents a delegate for the <see cref="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnSignatureCreated" /> event.
            </summary>
            <param name="message">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to sign.</param>
            <param name="signingSettings">The signing settings to use.</param>
            <param name="signature">The <see cref="T:Dalion.HttpMessageSigning.Signature" /> that was created.</param>
        </member>
        <member name="T:Dalion.HttpMessageSigning.RequestSigningEvents.OnSigningStringComposedDelegate">
            <summary>
                Represents a delegate for the <see cref="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnSigningStringComposed" /> event.
            </summary>
            <param name="message">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to sign.</param>
            <param name="signingString">The composed signing string.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSigning">
            <summary>
                Gets or sets the action to invoke just before signing a request.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnSigningStringComposed">
            <summary>
                Gets or sets the action to invoke when the signing string has been composed.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnSignatureCreated">
            <summary>
                Gets or sets the action to invoke when the request has been signed.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSigned">
            <summary>
                Gets or sets the action to invoke when the request has been signed.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.RequestTargetEscaping">
            <summary>
                Defines the methods of escaping of the (request-target) pseudo-header value.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.RequestTargetEscaping.RFC3986">
            <summary>
                Follow the rules of RFC 3986.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.RequestTargetEscaping.RFC2396">
            <summary>
                Follow the rules of RFC 2396, obsoleted by RFC 3986.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.RequestTargetEscaping.OriginalString">
            <summary>
                Take the original <see cref="T:System.Uri" /> string, and leave it up to the creator.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.RequestTargetEscaping.Unescaped">
            <summary>
                Any escaping is removed.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.RSASignatureAlgorithm">
            <summary>
                Represents an RSA algorithm that is used to sign a request, or to verify a signature.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.#ctor(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSA)">
            <summary>
                Creates a new <see cref="T:Dalion.HttpMessageSigning.RSASignatureAlgorithm" />.
            </summary>
            <param name="rsa">The RSA algorithm.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.RSASignatureAlgorithm.HashAlgorithm">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Dalion.HttpMessageSigning.RSASignatureAlgorithm.Name">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.ComputeHash(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.VerifySignature(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.CreateForSigning(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSAParameters)">
            <summary>
                Create a new instance of this class, using the specified settings, for signing purposes.
            </summary>
            <param name="hashAlgorithmName">The name of the hash algorithm to use.</param>
            <param name="privateParameters">The private parameters for the RSA algorithm.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.RSASignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.CreateForVerification(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSAParameters)">
            <summary>
                Create a new instance of this class, using the specified settings, for verification purposes.
            </summary>
            <param name="hashAlgorithmName">The name of the hash algorithm to use.</param>
            <param name="publicParameters">The public parameters for the RSA algorithm.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.RSASignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.RSASignatureAlgorithm.GetPublicKey">
            <summary>
                Export the public key of this RSA algorithm.
            </summary>
            <returns>The parameters containing the public key of this RSA algorithm.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.SharedSecretEncryptionKey">
            <summary>
                Represents an encryption key for shared secrets of symmetric encryption algorithms.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:Dalion.HttpMessageSigning.SharedSecretEncryptionKey" />.
            </summary>
            <param name="value">The string representation of this instance.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.Value">
            <summary>
                Gets the string representation of this instance.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.Empty">
            <summary>
                Represents an empty <see cref="T:Dalion.HttpMessageSigning.SharedSecretEncryptionKey" />.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.Equals(Dalion.HttpMessageSigning.SharedSecretEncryptionKey)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.op_Equality(Dalion.HttpMessageSigning.SharedSecretEncryptionKey,Dalion.HttpMessageSigning.SharedSecretEncryptionKey)">
            <summary>
                The equality operator of this type.
            </summary>
            <returns>True if the specified items are equal, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.op_Inequality(Dalion.HttpMessageSigning.SharedSecretEncryptionKey,Dalion.HttpMessageSigning.SharedSecretEncryptionKey)">
            <summary>
                The inequality operator of this type.
            </summary>
            <returns>True if the specified items are not equal, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.TryParse(System.String,Dalion.HttpMessageSigning.SharedSecretEncryptionKey@)">
            <summary>
                Try to parse the specified string to a <see cref="T:Dalion.HttpMessageSigning.SharedSecretEncryptionKey" />.
            </summary>
            <param name="value">The string representation to parse.</param>
            <param name="parsed">This will contain the parsed <see cref="T:Dalion.HttpMessageSigning.SharedSecretEncryptionKey" /> when parsing succeeded, otherwise <see cref="P:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.Empty" />.</param>
            <returns>True if parsing succeeded, otherwise false.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.op_Implicit(System.String)~Dalion.HttpMessageSigning.SharedSecretEncryptionKey">
            <summary>
                An implicit conversion operator for this type from string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.op_Implicit(Dalion.HttpMessageSigning.SharedSecretEncryptionKey)~System.String">
            <summary>
                An implicit conversion operator for this type to string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SharedSecretEncryptionKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.Signature">
            <summary>
                Represents a signature that is received from a client.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.Signature.DefaultSignatureAlgorithm">
            <summary>
                Represents the name of the default signature algorithm name to include in the signature.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.KeyId">
            <summary>
                REQUIRED: Gets or sets the entity that the server can use to look up the component they need to verify the signature.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.Algorithm">
            <summary>
                OPTIONAL: Gets or sets the algorithm that needs to be used to verify the signature.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.Created">
            <summary>
                OPTIONAL: Gets or sets the time at which the signature was created.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.Expires">
            <summary>
                OPTIONAL: Gets or sets the timespan after which the signature must be considered expired.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.Headers">
            <summary>
                OPTIONAL: Gets or sets the ordered list of names of request headers to include when verifying the signature for the message.
            </summary>
            <remarks>When empty, the default headers will be considered, according to the spec.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.Nonce">
            <summary>
                OPTIONAL: Gets or sets a unique string, that is part of the signature, to prevent replay attacks.
            </summary>
            <remarks>When null or empty, this value will not be part of the signature.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signature.String">
            <summary>
                REQUIRED: Gets or sets the signature string to be verified by the server.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signature.Clone">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signature.Validate">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signature.GetValidationErrors">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.SignatureAlgorithm">
            <summary>
                Contains static utility factory methods for <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> implementations.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.RSA)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="rsa">The RSA algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.ECDsa)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="ecdsa">The ECDsa algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.RSAParameters)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="privateParameters">The private RSA algorithm parameters to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.ECParameters)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="privateParameters">The private ECDsa algorithm parameters to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="certificate">The X.509 certificate to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.String)">
            <summary>
                Creates a new HMAC <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="hmacSecret">The shared HMAC secret to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.RSA,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="rsa">The RSA algorithm to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.ECDsa,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="ecdsa">The ECDsa algorithm to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.RSAParameters,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="privateParameters">The private RSA algorithm parameters to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.ECParameters,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="privateParameters">The private ECDsa algorithm parameters to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="certificate">The X.509 certificate to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForSigning(System.String,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new HMAC <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signing purposes.
            </summary>
            <param name="hmacSecret">The shared HMAC secret to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.RSA)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="rsa">The RSA algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.ECDsa)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="ecdsa">The ECDsa algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.RSAParameters)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="publicParameters">The public RSA algorithm parameters to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.ECParameters)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="publicParameters">The public ECDsa algorithm parameters to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="certificate">The X.509 certificate to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.String)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="hmacSecret">The shared HMAC secret to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.RSA,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new RSA <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="rsa">The RSA algorithm to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.ECDsa,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="ecdsa">The ECDsa algorithm to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.RSAParameters,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="publicParameters">The public RSA algorithm parameters to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.ECParameters,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="publicParameters">The public ECDsa algorithm parameters to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="certificate">The X.509 certificate to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SignatureAlgorithm.CreateForVerification(System.String,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
                Creates a new ECDsa <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />, for HTTP request signature verification purposes.
            </summary>
            <param name="hmacSecret">The shared HMAC secret to use.</param>
            <param name="hashAlgorithm">The name of the hash algorithm to use.</param>
            <returns>The newly created <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" />.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.SigningSettings">
            <summary>
                Represents settings to be used when signing a http request message.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.KeyId">
            <summary>
                The entity that the server can use to look up the component they need to verify the signature.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.SignatureAlgorithm">
            <summary>
                Gets or sets the <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> that is used to create the signature.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.Expires">
            <summary>
                Gets or sets the timespan after which the signature is considered expired.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.EnableNonce">
            <summary>
                Gets or sets a value indicating whether a 'Nonce' value will be included in the request signature.
            </summary>
            <remarks>A 'Nonce' value is used to avoid replay attacks.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.DigestHashAlgorithm">
            <summary>
                Gets or sets the hash algorithm to use to generate a Digest http header, to be able to verify that the body has not been modified.
            </summary>
            <remarks>Set to 'default' to disable Digest header generation.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.Headers">
            <summary>
                Gets or sets the ordered list of names of request headers to include when generating the signature for the message.
            </summary>
            <remarks>When empty, the default headers will be included, according to the spec.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.AuthorizationScheme">
            <summary>
                Gets or sets the name of the authorization scheme for the authorization header.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.UseDeprecatedAlgorithmParameter">
            <summary>
                Gets or sets a value indicating whether the 'algorithm' parameter should report deprecated algorithm names, instead of 'hs2019', for backwards compatibility.
            </summary>
            <remarks>Setting this to 'false' causes the value of the 'algorithm' parameter to be 'hs2019'.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.AutomaticallyAddRecommendedHeaders">
            <summary>
                Gets or sets a value indicating whether to automatically make the headers that are recommended by the spec a part of the signing string.
            </summary>
            <remarks>To fully conform with the spec, this setting should be set to 'false'.</remarks>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.RequestTargetEscaping">
            <summary>
                Gets or sets the method of escaping the value of the (request-target) pseudo-header.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.SigningSettings.Events">
            <summary>
                Gets or sets the <see cref="T:Dalion.HttpMessageSigning.RequestSigningEvents" /> to notify when signing requests.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.SigningSettings.Clone">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.SigningSettings.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.SigningSettings.Validate">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.SigningSettings.GetValidationErrors">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.UriEscaping">
            <summary>
                Defines the different supported rule sets for escaping <see cref="T:System.Uri" /> instances.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.UriEscaping.RFC3986">
            <summary>
                Follow the rules of RFC 3986.
            </summary>
        </member>
        <member name="F:Dalion.HttpMessageSigning.UriEscaping.RFC2396">
            <summary>
                Follow the rules of RFC 2396, obsoleted by RFC 3986.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Utils.IBackgroundTaskStarter">
            <summary>
                Represents an object that can start background tasks, without waiting for their completion.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Utils.IBackgroundTaskStarter.Start(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Start a background task.
            </summary>
            <param name="task">The work to be done.</param>
            <remarks>The background task will be started immediately.</remarks>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Utils.IBackgroundTaskStarter.Start(System.Func{System.Threading.Tasks.Task},System.TimeSpan)">
            <summary>
                Start a background task.
            </summary>
            <param name="task">The work to be done.</param>
            <param name="delay">The time after which the work should be started.</param>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Utils.IStringProtector">
            <summary>
                Represents an object that can protect a given <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Utils.IStringProtector.Protect(System.String)">
            <summary>
                Protect the given plain-text <see cref="T:System.String" />.
            </summary>
            <param name="plainText">The plain-text <see cref="T:System.String" /> to protect.</param>
            <returns>The protected plain-text <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Utils.IStringProtector.Unprotect(System.String)">
            <summary>
                Undo the protection on the given cypher <see cref="T:System.String" />.
            </summary>
            <param name="cipherText">The cypher <see cref="T:System.String" /> to undo protection for.</param>
            <returns>The plain-text <see cref="T:System.String" />.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Utils.IStringProtectorFactory">
            <summary>
                Represents an object that can create instances of <see cref="T:Dalion.HttpMessageSigning.Utils.IStringProtector" />.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Utils.IStringProtectorFactory.CreateSymmetric(System.String)">
            <summary>
                Create a new <see cref="T:Dalion.HttpMessageSigning.Utils.SymmetricStringProtector" />.
            </summary>
            <param name="secret">The secret <see cref="T:System.String" /> of the <see cref="T:Dalion.HttpMessageSigning.Utils.SymmetricStringProtector" />.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.Utils.SymmetricStringProtector" /></returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Utils.ISystemClock">
            <summary>
                Represents the clock of the current system.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Utils.ISystemClock.UtcNow">
            <summary>
                Gets the current system <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.ValidationError">
            <summary>
                Represents a validation error.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ValidationError.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance.
            </summary>
            <param name="propertyName">The name of the property for which validation failed.</param>
            <param name="message">The message associated with the error.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.ValidationError.PropertyName">
            <summary>
                Gets the name of the property for which validation failed.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.ValidationError.Message">
            <summary>
                Gets the message associated with the error.
            </summary>
        </member>
        <member name="T:Dalion.HttpMessageSigning.ValidationException">
            <summary>
                Represents an <see cref="T:System.Exception" /> that indicates that a HttpMessageSigning model validation operation has resulted in an error.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.ValidationException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ValidationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ValidationException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Dalion.HttpMessageSigning.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
    </members>
</doc>
