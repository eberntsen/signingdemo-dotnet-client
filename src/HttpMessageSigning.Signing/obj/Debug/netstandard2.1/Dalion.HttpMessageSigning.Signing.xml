<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dalion.HttpMessageSigning.Signing</name>
    </assembly>
    <members>
        <member name="T:Dalion.HttpMessageSigning.Signing.Extensions">
            <summary>
                Extension methods for this library.
            </summary>
            <summary>
                Extension methods for this library.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.Set(System.Net.Http.Headers.HttpContentHeaders,System.String,System.String)">
            <summary>
            Adds or updates a content header with the specified name.
            </summary>
            <param name="headers">The header collection to add or update to.</param>
            <param name="name">The name of the header to add or update.</param>
            <param name="value">The single value to set.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.Set(System.Net.Http.Headers.HttpContentHeaders,System.String,System.String[])">
            <summary>
            Adds or updates a content header with the specified name.
            </summary>
            <param name="headers">The header collection to add or update to.</param>
            <param name="name">The name of the header to add or update.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.Set(System.Net.Http.Headers.HttpContentHeaders,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds or updates a content header with the specified name.
            </summary>
            <param name="headers">The header collection to add or update to.</param>
            <param name="name">The name of the header to add or update.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.Set(System.Net.Http.Headers.HttpRequestHeaders,System.String,System.String)">
            <summary>
            Adds or updates a request header with the specified name.
            </summary>
            <param name="headers">The header collection to add or update to.</param>
            <param name="name">The name of the header to add or update.</param>
            <param name="value">The single value to set.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.Set(System.Net.Http.Headers.HttpRequestHeaders,System.String,System.String[])">
            <summary>
            Adds or updates a request header with the specified name.
            </summary>
            <param name="headers">The header collection to add or update to.</param>
            <param name="name">The name of the header to add or update.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.Set(System.Net.Http.Headers.HttpRequestHeaders,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds or updates a request header with the specified name.
            </summary>
            <param name="headers">The header collection to add or update to.</param>
            <param name="name">The name of the header to add or update.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddECDsaHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.Security.Cryptography.ECDsa)">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="ecdsa">The ECDsa key pair.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddECDsaHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.Security.Cryptography.ECDsa,System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="ecdsa">The ECDsa key pair.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddECDsaHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,System.Security.Cryptography.ECDsa},System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="ecdsaFactory">The factory that creates the ECDsa key pair.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddECDsaHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,System.Security.Cryptography.ECDsa},System.Action{System.IServiceProvider,Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="ecdsaFactory">The factory that creates the ECDsa key pair.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHMACHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.String)">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="hmacSecret">The HMAC symmetric key.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHMACHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.String,System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="hmacSecret">The HMAC symmetric key.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHMACHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,System.String},System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="hmacSecretFactory">The factory that creates the HMAC symmetric key.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHMACHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,System.String},System.Action{System.IServiceProvider,Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="hmacSecretFactory">The factory that creates the HMAC symmetric key.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <returns>The <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to configure the signing settings.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,Dalion.HttpMessageSigning.SigningSettings)">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="signingSettings">The signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="signingSettingsFactory">The factory that creates the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="signingSettingsFactory">The factory that creates the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddRSAHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.Security.Cryptography.RSA)">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="rsa">The RSA key pair.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddRSAHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,Dalion.HttpMessageSigning.KeyId,System.Security.Cryptography.RSA,System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyId">The <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="rsa">The RSA key pair.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddRSAHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,System.Security.Cryptography.RSA},System.Action{Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="rsaFactory">The factory that creates the RSA key pair.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.Extensions.AddRSAHttpMessageSigning(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Dalion.HttpMessageSigning.KeyId},System.Func{System.IServiceProvider,System.Security.Cryptography.RSA},System.Action{System.IServiceProvider,Dalion.HttpMessageSigning.SigningSettings})">
            <summary>Adds http message signing registrations to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="keyIdFactory">The factory that creates the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the registrations to.</param>
            <param name="rsaFactory">The factory that creates the RSA key pair.</param>
            <param name="signingSettingsConfig">The action that configures the signing settings.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to which the registrations were added.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Signing.HttpRequestSigningHandler">
            <summary>
                A HTTP message handler that signs HTTP requests before sending them.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.HttpRequestSigningHandler.#ctor(Dalion.HttpMessageSigning.Signing.IRequestSigner)">
            <summary>
                Create a new instance of this class.
            </summary>
            <param name="requestSigner">The <see cref="T:Dalion.HttpMessageSigning.Signing.IRequestSigner" /> that will sign the request.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.HttpRequestSigningHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder">
            <summary>
                A builder for configuring HTTP message signing.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.Services">
            <summary>
                Gets the application service collection.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseKeyId(Dalion.HttpMessageSigning.KeyId)">
            <summary>Configure the <see cref="T:Dalion.HttpMessageSigning.KeyId" /> that the server can use to identify the client application.</summary>
            <param name="keyId">The entity that the server can use to look up the component they need to verify the signature.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseSigningSettings(Dalion.HttpMessageSigning.SigningSettings)">
            <summary>Configure the <see cref="T:Dalion.HttpMessageSigning.SigningSettings" />.</summary>
            <param name="settings">The signing settings.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseSignatureAlgorithm(Dalion.HttpMessageSigning.ISignatureAlgorithm)">
            <summary>Configure the <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> that is used to create the signature.</summary>
            <param name="signatureAlgorithm">The <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> that is used to create the signature.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseECDsaSignatureAlgorithm(System.Func{System.Security.Cryptography.ECDsa})">
            <summary>Configure the <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> that is used to create the signature.</summary>
            <param name="ecdsaFactory">The factory that creates the ECDsa key pair.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseRSASignatureAlgorithm(System.Func{System.Security.Cryptography.RSA})">
            <summary>Configure the <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> that is used to create the signature.</summary>
            <param name="rsaFactory">The factory that creates the RSA key pair.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseHMACSignatureAlgorithm(System.Func{System.String})">
            <summary>Configure the <see cref="T:Dalion.HttpMessageSigning.ISignatureAlgorithm" /> that is used to create the signature.</summary>
            <param name="hmacSecretFactory">The factory that creates the HMAC symmetric key.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseExpires(System.TimeSpan)">
            <summary>Configure the timespan after which the signature is considered expired.</summary>
            <param name="expires">The timespan after which the signature is considered expired.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseNonce(System.Boolean)">
            <summary>Configure a value indicating whether a 'Nonce' value will be included in the request signature.</summary>
            <param name="enableNonce">True to enable the 'Nonce' feature; otherwise, false.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseDigestAlgorithm(System.Security.Cryptography.HashAlgorithmName)">
            <summary>Configure the hash algorithm to use to generate a Digest http header, to be able to verify that the body has not been modified.</summary>
            <param name="digestAlgorithm">The hash algorithm to use to generate a Digest http header, to be able to verify that the body has not been modified. Set to 'default' to disable Digest header generation.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseHeaders(Dalion.HttpMessageSigning.HeaderName[])">
            <summary>Configure the ordered list of names of request headers to include when generating the signature for the message.</summary>
            <param name="headers">The ordered list of names of request headers to include when generating the signature for the message. When empty, the default headers will be included, according to the spec.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseAuthorizationScheme(System.String)">
            <summary>Configure the name of the authorization scheme for the authorization header.</summary>
            <param name="authorizationScheme">The name of the authorization scheme for the authorization header.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseUseDeprecatedAlgorithmParameter(System.Boolean)">
            <summary>Configure a value indicating whether the 'algorithm' parameter should report deprecated algorithm names, instead of 'hs2019', for backwards compatibility.</summary>
            <param name="useDeprecatedAlgorithmParameter">True to enable the 'algorithm' parameter should report deprecated algorithm names, instead of 'hs2019', for backwards compatibility. Setting this to 'false' causes the value of the 'algorithm' parameter to be 'hs2019'.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseAutomaticallyAddedRecommendedHeaders(System.Boolean)">
            <summary>Configure a value indicating whether to automatically make the headers that are recommended by the spec a part of the signing string.</summary>
            <param name="automaticallyAddRecommendedHeaders">True to automatically make the headers that are recommended by the spec a part of the signing string. To fully conform with the spec, this setting should be set to 'false'.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseRequestTargetEscaping(Dalion.HttpMessageSigning.RequestTargetEscaping)">
            <summary>Configure the method of escaping the value of the (request-target) pseudo-header.</summary>
            <param name="requestTargetEscaping">The method of escaping the value of the (request-target) pseudo-header.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseEvents(Dalion.HttpMessageSigning.RequestSigningEvents)">
            <summary>Configure hooks that are called during HTTP message signing.</summary>
            <param name="events">The hooks that are called during HTTP message signing.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseOnRequestSigningEvent(Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSigningDelegate)">
            <summary>Configure a hook that are called during HTTP message signing.</summary>
            <param name="onRequestSigning">The hook that is called during HTTP message signing.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseOnSigningStringComposedEvent(Dalion.HttpMessageSigning.RequestSigningEvents.OnSigningStringComposedDelegate)">
            <summary>Configure a hook that are called during HTTP message signing.</summary>
            <param name="onSigningStringComposed">The hook that is called during HTTP message signing.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseOnSignatureCreatedEvent(Dalion.HttpMessageSigning.RequestSigningEvents.OnSignatureCreatedDelegate)">
            <summary>Configure a hook that are called during HTTP message signing.</summary>
            <param name="onSignatureCreated">The hook that is called during HTTP message signing.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder.UseOnRequestSignedEvent(Dalion.HttpMessageSigning.RequestSigningEvents.OnRequestSignedDelegate)">
            <summary>Configure a hook that are called during HTTP message signing.</summary>
            <param name="onRequestSigned">The hook that is called during HTTP message signing.</param>
            <returns>A reference to the <see cref="T:Dalion.HttpMessageSigning.Signing.IHttpMessageSigningBuilder" /> that can be used to continue configuration.</returns>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Signing.IRequestSigner">
            <summary>
            Service that adds a signature to the specified request, in the form of an Authorization header.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IRequestSigner.Sign(System.Net.Http.HttpRequestMessage)">
            <summary>
            Sign the specified request.
            </summary>
            <param name="request">The request to sign.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IRequestSigner.Sign(System.Net.Http.HttpRequestMessage,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Sign the specified request.
            </summary>
            <param name="request">The request to sign.</param>
            <param name="timeOfSigning">The time when the signature becomes valid.</param>
            <param name="expires">The timespan after which the signature is considered expired.</param>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Signing.IRequestSignerFactory">
            <summary>
            Factory that is able to create a <see cref="T:Dalion.HttpMessageSigning.Signing.IRequestSigner"/>, based on the specified settings.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IRequestSignerFactory.Create(Dalion.HttpMessageSigning.KeyId,Dalion.HttpMessageSigning.SigningSettings)">
            <summary>
            Create a new <see cref="T:Dalion.HttpMessageSigning.Signing.IRequestSigner"/>, based on the specified settings.
            </summary>
            <param name="keyId">The identifier that is associated with the client to sign the request for.</param>
            <param name="signingSettings">The settings that specify how to sign requests.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.Signing.IRequestSigner"/>.</returns>
            <remarks>The specified <see cref="T:Dalion.HttpMessageSigning.SigningSettings"/> are validated. When invalid, a new <see cref="T:Dalion.HttpMessageSigning.ValidationException"/> is thrown.</remarks>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.IRequestSignerFactory.CreateFor(Dalion.HttpMessageSigning.KeyId)">
            <summary>
            Gets the <see cref="T:Dalion.HttpMessageSigning.Signing.IRequestSigner"/>, that is associated with the specified <see cref="T:Dalion.HttpMessageSigning.KeyId"/>.
            </summary>
            <param name="keyId">The identifier that is associated with the client to sign the request for.</param>
            <returns>A new <see cref="T:Dalion.HttpMessageSigning.Signing.IRequestSigner"/>.</returns>
            <remarks>The specified <see cref="T:Dalion.HttpMessageSigning.SigningSettings"/> are validated. When invalid, a new <see cref="T:Dalion.HttpMessageSigning.ValidationException"/> is thrown.</remarks>
        </member>
        <member name="T:Dalion.HttpMessageSigning.Signing.ShortGuid">
            <summary>
                Represents a globally unique identifier (GUID) with a shorter string value.
            </summary>
            <remarks>Based on http://www.singular.co.nz/2007/12/shortguid-a-shorter-and-url-friendly-guid-in-c-sharp/</remarks>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.ShortGuid.#ctor(System.String)">
            <summary>
                Creates a ShortGuid from a base64 encoded string.
            </summary>
            <param name="value">The encoded guid as a base64 string.</param>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.ShortGuid.#ctor(System.Guid)">
            <summary>
                Creates a ShortGuid from a Guid.
            </summary>
            <param name="guid">The Guid to encode.</param>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signing.ShortGuid.Guid">
            <summary>
                Gets the underlying Guid.
            </summary>
        </member>
        <member name="P:Dalion.HttpMessageSigning.Signing.ShortGuid.Value">
            <summary>
                Gets the underlying base64 encoded string.
            </summary>
        </member>
        <member name="M:Dalion.HttpMessageSigning.Signing.ShortGuid.NewGuid">
            <summary>
                Initialises a new instance of the ShortGuid class.
            </summary>
            <returns>A new instance of the ShortGuid class.</returns>
        </member>
    </members>
</doc>
